--- linux-2.6.26.orig/drivers/ata/libata-sff.c	2008-07-14 05:51:29.000000000 +0800
+++ linux-2.6.26.to_patch/drivers/ata/libata-sff.c	2009-12-04 23:24:03.000000000 +0800
@@ -1358,7 +1358,10 @@
 		msleep(2);
 		status = ata_sff_busy_wait(ap, ATA_BUSY, 10);
 		if (status & ATA_BUSY) {
-			ata_pio_queue_task(ap, qc, ATA_SHORT_PAUSE);
+            if (ap->ops->pio_task)
+                ata_port_queue_task(ap, ap->ops->pio_task, qc, ATA_SHORT_PAUSE);
+            else
+                ata_pio_queue_task(ap, qc, ATA_SHORT_PAUSE);
 			return;
 		}
 	}
@@ -1421,18 +1424,30 @@
 	/* start the command */
 	switch (qc->tf.protocol) {
 	case ATA_PROT_NODATA:
+        VPRINTK("ATA_PROT_NODATA\n");
 		if (qc->tf.flags & ATA_TFLAG_POLLING)
 			ata_qc_set_polling(qc);
 
 		ata_tf_to_host(ap, &qc->tf);
 		ap->hsm_task_state = HSM_ST_LAST;
 
-		if (qc->tf.flags & ATA_TFLAG_POLLING)
-			ata_pio_queue_task(ap, qc, 0);
+		if (qc->tf.flags & ATA_TFLAG_POLLING) {
+            /* EZPacket : in OXNAS orig code, when ap->ops->pio_task not ezro, 
+             *   it uses ap->ops->pio_task instead of ata_pio_task.
+             *   In 2.6.26 implementation, it just ignore the parameter,
+             *   we can use PREPARE_DELAYED_WORK directly.
+             *   For now, we open this patch but leave a kernel message. */
+            if (ap->ops->pio_task) {
+                VPRINTK("ap->ops->pio_task --- just for reference.\n");
+                PREPARE_DELAYED_WORK(&ap->port_task, ap->ops->pio_task);
+            }
+            ata_pio_queue_task(ap, qc, 0);
+        }
 
 		break;
 
 	case ATA_PROT_DMA:
+        VPRINTK("ATA_PROT_DMA\n");
 		WARN_ON(qc->tf.flags & ATA_TFLAG_POLLING);
 
 		ap->ops->sff_tf_load(ap, &qc->tf);  /* load tf registers */
@@ -1442,6 +1457,7 @@
 		break;
 
 	case ATA_PROT_PIO:
+        VPRINTK("ATA_PROT_PIO\n");
 		if (qc->tf.flags & ATA_TFLAG_POLLING)
 			ata_qc_set_polling(qc);
 
@@ -1450,7 +1466,16 @@
 		if (qc->tf.flags & ATA_TFLAG_WRITE) {
 			/* PIO data out protocol */
 			ap->hsm_task_state = HSM_ST_FIRST;
-			ata_pio_queue_task(ap, qc, 0);
+            /* EZPacket : in OXNAS orig code, when ap->ops->pio_task not ezro, 
+             *   it uses ap->ops->pio_task instead of ata_pio_task.
+             *   In 2.6.26 implementation, it just ignore the parameter,
+             *   we may need to use PREPARE_DELAYED_WORK directly. 
+             *   For now, we open this patch but leave a kernel message. */
+            if (ap->ops->pio_task) {
+                VPRINTK("ap->ops->pio_task --- just for reference.\n");
+                PREPARE_DELAYED_WORK(&ap->port_task, ap->ops->pio_task);
+            }
+            ata_pio_queue_task(ap, qc, 0);
 
 			/* always send first data block using
 			 * the ata_pio_task() codepath.
@@ -1459,8 +1484,18 @@
 			/* PIO data in protocol */
 			ap->hsm_task_state = HSM_ST;
 
-			if (qc->tf.flags & ATA_TFLAG_POLLING)
-				ata_pio_queue_task(ap, qc, 0);
+            if (qc->tf.flags & ATA_TFLAG_POLLING) {
+                /* EZPacket : in OXNAS orig code, when ap->ops->pio_task not ezro, 
+                 *   it uses ap->ops->pio_task instead of ata_pio_task.
+                 *   In 2.6.26 implementation, it just ignore the parameter,
+                 *   we may need to use PREPARE_DELAYED_WORK directly. 
+                 *   For now, we open this patch but leave a kernel message. */
+                if (ap->ops->pio_task) {
+                    VPRINTK("ap->ops->pio_task --- just for reference.\n");
+                    PREPARE_DELAYED_WORK(&ap->port_task, ap->ops->pio_task);
+                }
+                ata_pio_queue_task(ap, ata_pio_task, qc, 0);
+            }
 
 			/* if polling, ata_pio_task() handles the rest.
 			 * otherwise, interrupt handler takes over from here.
@@ -1471,6 +1506,7 @@
 
 	case ATAPI_PROT_PIO:
 	case ATAPI_PROT_NODATA:
+        VPRINTK("ATA_PROT_ATAPI / ATA_PROT_ATAPI_NODATA\n");
 		if (qc->tf.flags & ATA_TFLAG_POLLING)
 			ata_qc_set_polling(qc);
 
@@ -1480,8 +1516,18 @@
 
 		/* send cdb by polling if no cdb interrupt */
 		if ((!(qc->dev->flags & ATA_DFLAG_CDB_INTR)) ||
-		    (qc->tf.flags & ATA_TFLAG_POLLING))
-			ata_pio_queue_task(ap, qc, 0);
+		    (qc->tf.flags & ATA_TFLAG_POLLING)) {
+            /* EZPacket : in OXNAS orig code, when ap->ops->pio_task not ezro, 
+             *   it uses ap->ops->pio_task instead of ata_pio_task.
+             *   In 2.6.26 implementation, it just ignore the parameter,
+             *   we can use PREPARE_DELAYED_WORK directly.
+             *   For now, we open this patch but leave a kernel message. */
+            if (ap->ops->pio_task) {
+                VPRINTK("ap->ops->pio_task --- just for reference.\n");
+                PREPARE_DELAYED_WORK(&ap->port_task, ap->ops->pio_task);
+            }
+            ata_pio_queue_task(ap, qc, 0);
+        }
 		break;
 
 	case ATAPI_PROT_DMA:
@@ -1492,8 +1538,18 @@
 		ap->hsm_task_state = HSM_ST_FIRST;
 
 		/* send cdb by polling if no cdb interrupt */
-		if (!(qc->dev->flags & ATA_DFLAG_CDB_INTR))
+		if (!(qc->dev->flags & ATA_DFLAG_CDB_INTR)) {
+            /* EZPacket : in OXNAS orig code, when ap->ops->pio_task not ezro, 
+             *   it uses ap->ops->pio_task instead of ata_pio_task.
+             *   In 2.6.26 implementation, it just ignore the parameter,
+             *   we can use PREPARE_DELAYED_WORK directly.
+             *   For now, we open this patch but leave a kernel message. */
+            if (ap->ops->pio_task) {
+                VPRINTK("ap->ops->pio_task --- just for reference.\n");
+                PREPARE_DELAYED_WORK(&ap->port_task, ap->ops->pio_task);
+            }
 			ata_pio_queue_task(ap, qc, 0);
+        }
 		break;
 
 	default:
@@ -1770,26 +1826,32 @@
 static unsigned int ata_devchk(struct ata_port *ap, unsigned int device)
 {
 	struct ata_ioports *ioaddr = &ap->ioaddr;
-	u8 nsect, lbal;
+    VPRINTK("\n");
+    if (ap->ops->dev_chk) {
+        return ap->ops->dev_chk(ap,device);
+    } else {
 
-	ap->ops->sff_dev_select(ap, device);
+        u8 nsect, lbal;
 
-	iowrite8(0x55, ioaddr->nsect_addr);
-	iowrite8(0xaa, ioaddr->lbal_addr);
+        ap->ops->sff_dev_select(ap, device);
 
-	iowrite8(0xaa, ioaddr->nsect_addr);
-	iowrite8(0x55, ioaddr->lbal_addr);
+        iowrite8(0x55, ioaddr->nsect_addr);
+        iowrite8(0xaa, ioaddr->lbal_addr);
 
-	iowrite8(0x55, ioaddr->nsect_addr);
-	iowrite8(0xaa, ioaddr->lbal_addr);
+        iowrite8(0xaa, ioaddr->nsect_addr);
+        iowrite8(0x55, ioaddr->lbal_addr);
 
-	nsect = ioread8(ioaddr->nsect_addr);
-	lbal = ioread8(ioaddr->lbal_addr);
+        iowrite8(0x55, ioaddr->nsect_addr);
+        iowrite8(0xaa, ioaddr->lbal_addr);
 
-	if ((nsect == 0x55) && (lbal == 0xaa))
-		return 1;	/* we found a device */
+        nsect = ioread8(ioaddr->nsect_addr);
+        lbal = ioread8(ioaddr->lbal_addr);
 
-	return 0;		/* nothing found */
+        if ((nsect == 0x55) && (lbal == 0xaa))
+            return 1;	/* we found a device */
+
+        return 0;		/* nothing found */
+    }
 }
 
 /**
@@ -1941,17 +2003,40 @@
 static int ata_bus_softreset(struct ata_port *ap, unsigned int devmask,
 			     unsigned long deadline)
 {
-	struct ata_ioports *ioaddr = &ap->ioaddr;
-
 	DPRINTK("ata%u: bus reset via SRST\n", ap->print_id);
-
+    /* EZPacket : patched from OXNAS */
+#if 0 
 	/* software reset.  causes dev0 to be selected */
-	iowrite8(ap->ctl, ioaddr->ctl_addr);
+	tf.ctl = ap->ctl;
+	ap->ops->tf_load(ap,&tf);
 	udelay(20);	/* FIXME: flush */
-	iowrite8(ap->ctl | ATA_SRST, ioaddr->ctl_addr);
+
+	tf.ctl = ap->ctl | ATA_SRST;
+	ap->ops->tf_load(ap,&tf);
 	udelay(20);	/* FIXME: flush */
-	iowrite8(ap->ctl, ioaddr->ctl_addr);
+    
+	tf.ctl = ap->ctl;
+	ap->ops->tf_load(ap,&tf);
+
+	/* spec mandates ">= 2ms" before checking status.
+	 * We wait 150ms, because that was the magic delay used for
+	 * ATAPI devices in Hale Landis's ATADRVR, for the period of time
+	 * between when the ATA command register is written, and then
+	 * status is checked.  Because waiting for "a while" before
+	 * checking status is fine, post SRST, we perform this magic
+	 * delay here as well.
+	 *
+	 * Old drivers/ide uses the 2mS rule and then waits for ready
+	 */
+	msleep(150);
 
+	/* Before we perform post reset processing we want to see if
+	 * the bus shows 0xFF because the odd clown forgets the D7
+	 * pulldown resistor.
+	 */
+	if (ata_chk_status(ap) == 0xFF)
+		return -ENODEV;
+#endif
 	/* wait the port to become ready */
 	return ata_sff_wait_after_reset(&ap->link, devmask, deadline);
 }
@@ -2072,9 +2157,14 @@
 		return;
 	}
 
+    /** @todo fix by using tf/tf_load as in ata_bus_softreset */
+    #if 0
 	/* set up device control */
 	if (ap->ioaddr.ctl_addr)
 		iowrite8(ap->ctl, ap->ioaddr.ctl_addr);
+    #endif
+
+	DPRINTK("EXIT\n");
 }
 
 /**
@@ -2344,7 +2434,6 @@
 void ata_bus_reset(struct ata_port *ap)
 {
 	struct ata_device *device = ap->link.device;
-	struct ata_ioports *ioaddr = &ap->ioaddr;
 	unsigned int slave_possible = ap->flags & ATA_FLAG_SLAVE_POSS;
 	u8 err;
 	unsigned int dev0, dev1 = 0, devmask = 0;
@@ -2395,8 +2484,11 @@
 		goto err_out;
 
 	if (ap->flags & (ATA_FLAG_SATA_RESET | ATA_FLAG_SRST)) {
+        /** @todo fix by using tf/tf_load as in ata_bus_softreset */
+        #if 0
 		/* set up device control for ATA_FLAG_SATA_RESET */
 		iowrite8(ap->ctl, ioaddr->ctl_addr);
+        #endif
 	}
 
 	DPRINTK("EXIT\n");
