diff -Naur linux-2.6.24.4/block/blk-merge.c linux-2.6.24.4-oxnas/block/blk-merge.c
--- linux-2.6.24.4/block/blk-merge.c	2009-12-01 23:49:34.000000000 +0800
+++ linux-2.6.24.4/block/blk-merge.c	2009-12-02 00:03:27.000000000 +0800
@@ -306,6 +306,18 @@
 	else
 		max_sectors = q->max_sectors;
 
+    /*
+     * If the RAID modes of the bio associated with the request differs
+     * from the merge candidate bio, it can't be merged
+     */
+    if (req->bio->bi_raid != bio->bi_raid)
+        return 0;
+
+   /* Can't merge if incoherent settings differ */
+    if ((req->bio->bi_rw & (1 << BIO_RW_INCOHERENT)) !=
+		(bio->bi_rw & (1 << BIO_RW_INCOHERENT)))
+        return 0;
+
 	if (req->nr_sectors + bio_sectors(bio) > max_sectors) {
 		req->cmd_flags |= REQ_NOMERGE;
 		if (req == q->last_merge)
@@ -343,7 +355,18 @@
 		max_sectors = q->max_hw_sectors;
 	else
 		max_sectors = q->max_sectors;
-
+   
+    /*
+     * If the RAID modes of the bio associated with the request differs
+     * from the merge candidate bio, it can't be merged
+     */
+    if (req->bio->bi_raid != bio->bi_raid)
+        return 0;
+
+   /* Can't merge if incoherent settings differ */
+    if ((req->bio->bi_rw & (1 << BIO_RW_INCOHERENT)) !=
+		(bio->bi_rw & (1 << BIO_RW_INCOHERENT)))
+        return 0;
 
 	if (req->nr_sectors + bio_sectors(bio) > max_sectors) {
 		req->cmd_flags |= REQ_NOMERGE;
@@ -384,6 +407,17 @@
 	 */
 	if (req->special || next->special)
 		return 0;
+    
+     /*
+      * If the RAID modes of the bio associated with the two requests differ
+      * then they cannot be merged.
+      *
+     BUG_ON(!req);
+     BUG_ON(!req->bio);
+     BUG_ON(!next);
+     BUG_ON(!next->bio);
+     if (req->bio->bi_raid != next->bio->bi_raid)
+        return 0;*/
 
 	/*
 	 * Will it become too large?
diff -Naur linux-2.6.24.4/block/blk-core.c linux-2.6.24.4-oxnas/block/blk-core.c
--- linux-2.6.24.4/block/blk-core.c	2009-12-02 00:05:45.000000000 +0800
+++ linux-2.6.24.4/block/blk-core.c	2009-12-02 00:37:32.000000000 +0800
@@ -1084,7 +1084,7 @@
 
 static int __make_request(struct request_queue *q, struct bio *bio)
 {
-	struct request *req;
+	struct request *req = 0;
 	int el_ret, nr_sectors, barrier, err;
 	const unsigned short prio = bio_prio(bio);
 	const int sync = bio_sync(bio);
@@ -1111,6 +1111,16 @@
 		goto get_rq;
 
 	el_ret = elv_merge(q, &req, bio);
+    
+     /* if the bio raid modes or coherency strategies differ, force a no-merge */
+    if ((!ELEVATOR_NO_MERGE) && (req) && (req->bio) ) {
+        if (bio->bi_raid != req->bio->bi_raid )
+            el_ret = ELEVATOR_NO_MERGE;
+		if ((req->bio->bi_rw & (1 << BIO_RW_INCOHERENT)) !=
+			(bio->bi_rw & (1 << BIO_RW_INCOHERENT)))
+            el_ret = ELEVATOR_NO_MERGE;
+    }
+    
 	switch (el_ret) {
 	case ELEVATOR_BACK_MERGE:
 		BUG_ON(!rq_mergeable(req));
@@ -1332,9 +1342,10 @@
 	int err = -EIO;
 
 	might_sleep();
-
-	if (bio_check_eod(bio, nr_sectors))
-		goto end_io;
+		
+    /* RAID bios can appear to access past the end of the device */
+	if (!bio->bi_raid && bio_check_eod(bio, nr_sectors))
+    goto end_io;
 
 	/*
 	 * Resolve the mapping until finished. (drivers are
@@ -1389,8 +1400,9 @@
 
 		old_sector = bio->bi_sector;
 		old_dev = bio->bi_bdev->bd_dev;
-
-		if (bio_check_eod(bio, nr_sectors))
+		
+        /* RAID bios can appear to access past the end of the device */
+        if (!bio->bi_raid && bio_check_eod(bio, nr_sectors))
 			goto end_io;
 		if (bio_empty_barrier(bio) && !q->prepare_flush_fn) {
 			err = -EOPNOTSUPP;
