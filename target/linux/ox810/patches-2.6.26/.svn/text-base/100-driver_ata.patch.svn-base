diff -Naur linux-2.6.24.4/drivers/ata/Kconfig linux-2.6.24.4/drivers/ata/Kconfig
--- linux-2.6.24.4/drivers/ata/Kconfig	2009-12-03 01:23:36.000000000 +0800
+++ linux-2.6.24.4/drivers/ata/Kconfig	2009-12-03 01:27:46.000000000 +0800
@@ -56,6 +56,27 @@
 
 	  If unsure, say N.
 
+config SATA_OXNAS_SINGLE_SATA
+   bool "Force OXNAS family devices to only use one SATA port"
+   depends on SATA_OX800 || SATA_OX810
+   default n
+   help
+     Prevents the ox800sata module from registering its second sata port,this
+     reduces startup time on systems where only one port is physically present
+     on the board/chip periphery.
+
+config SATA_OXNAS_DISK_LIGHT
+   bool "Whether OXNAS family device should use a SATA disk activity light"
+   depends on SATA_OX800 || SATA_OX810
+   default n
+
+config SATA_OXNAS_DISK_LIGHT_GPIO_LINE
+   int  "GPIO line of the disk light"
+   depends on SATA_OXNAS_DISK_LIGHT
+   default 29
+   help
+     Selects the GPIO line of the disk activity light.
+
 config SATA_SIL24
 	tristate "Silicon Image 3124/3132 SATA support"
 	depends on PCI
@@ -219,6 +240,22 @@
 	  firmware in the BIOS. This driver can sometimes handle
 	  otherwise unsupported hardware.
 
+config SATA_OX800
+   bool "Oxford Semiconductor OX800 SATA support"
+   depends on ARCH_OXNAS && OXNAS_VERSION_0X800
+   default n
+   help
+     This option enables support for the 924 based sata core
+
+config SATA_OX810
+   bool "Oxford Semiconductor OX810 SATA support"
+   depends on ARCH_OXNAS && OXNAS_VERSION_0X810
+   default n
+   help
+     This option enables support for the 934 based sata core
+
+
+
 config PATA_ALI
 	tristate "ALi PATA support (Experimental)"
 	depends on PCI && EXPERIMENTAL
diff -Naur linux-2.6.24.4/drivers/ata/libata-scsi.c linux-2.6.24.4/drivers/ata/libata-scsi.c
--- linux-2.6.24.4/drivers/ata/libata-scsi.c	2009-12-03 04:02:32.000000000 +0800
+++ linux-2.6.24.4/drivers/ata/libata-scsi.c	2009-12-03 05:41:51.000000000 +0800
@@ -1538,7 +1538,11 @@
 
 	qc->scsidone(cmd);
 
-	ata_qc_free(qc);
+    if (ap->ops->qc_free)
+        ap->ops->qc_free(qc);
+    else
+         ata_qc_free(qc);
+
 }
 
 /**
@@ -1613,22 +1617,34 @@
 	return 0;
 
 early_finish:
-	ata_qc_free(qc);
-	qc->scsidone(cmd);
+    if (qc->ap->ops->qc_free)
+         qc->ap->ops->qc_free(qc);
+    else
+          ata_qc_free(qc);
+
+    qc->scsidone(cmd);
 	DPRINTK("EXIT - early finish (good or error)\n");
 	return 0;
 
 err_did:
-	ata_qc_free(qc);
-	cmd->result = (DID_ERROR << 16);
+    if (qc->ap->ops->qc_free)
+         qc->ap->ops->qc_free(qc);
+    else
+         ata_qc_free(qc);
+
+    cmd->result = (DID_ERROR << 16);
 	qc->scsidone(cmd);
 err_mem:
 	DPRINTK("EXIT - internal\n");
 	return 0;
 
 defer:
-	ata_qc_free(qc);
-	DPRINTK("EXIT - defer\n");
+	 if (qc->ap->ops->qc_free)
+          qc->ap->ops->qc_free(qc);
+     else
+           ata_qc_free(qc);
+
+    DPRINTK("EXIT - defer\n");
 	if (rc == ATA_DEFER_LINK)
 		return SCSI_MLQUEUE_DEVICE_BUSY;
 	else
@@ -1714,6 +1730,47 @@
 	args->done(cmd);
 }
 
+        
+/**
+ * ata_scsi_split_model_and_vendor  
+ * 
+ * This function assumes that in some drives the vendor name is present in 
+ * the model string, with the vendor name first sepparated from the model by
+ * a single space. This function returns 0 if the space is not present in the
+ * first eight characters (the maximum that SCSI allows for a vendor name) 
+ * if the space is present, this function returns the length in the string that
+ * the model info starts. 
+ *  
+ * @param orig model string
+ * @return the length to the model part in the input string, 0 if not present.
+ */
+
+static unsigned int ata_scsi_split_model_and_vendor(unsigned char* orig) {
+    unsigned int i = 0;
+    unsigned int len = 0;
+    
+    /* look for a space */
+    while(i < 8) {
+        if (orig[i] == ' ') {
+            len = i;
+            break;
+        }
+        i++;
+    }
+    
+    /* look for a character */
+    while(i < 8) {
+        if( ((orig[i] > '0') && (orig[i] < '9')) ||
+            ((orig[i] > 'A') && (orig[i] < 'Z')) ||
+            ((orig[i] > 'a') && (orig[i] < 'z')) ) {
+            return len;
+        }
+        i++;
+    }
+    
+    return 0;
+}
+        
 /**
  *	ata_scsiop_inq_std - Simulate INQUIRY command
  *	@args: device IDENTIFY data / SCSI command of interest.
@@ -1751,6 +1808,23 @@
 		hdr[1] |= (1 << 7);
 
 	memcpy(rbuf, hdr, sizeof(hdr));
+
+    
+        unsigned int len = 0;
+        ata_id_string(args->id, &rbuf[16], ATA_ID_PROD, 16);
+        len = ata_scsi_split_model_and_vendor(&rbuf[16]);
+    
+        if (len > 0) {
+            /* clear, then copy the vendor */
+            memcpy(&rbuf[8], "        ", 8);
+            memcpy(&rbuf[8], &rbuf[16], len);
+        } else {
+            memcpy(&rbuf[8], "ATA     ", 8);
+        }
+        ata_id_string(args->id, &rbuf[32], ATA_ID_FW_REV, 4);
+        if (rbuf[32] == 0 || rbuf[32] == ' ')
+            memcpy(&rbuf[32], "n/a ", 4);
+    
 	memcpy(&rbuf[8], "ATA     ", 8);
 	ata_id_string(args->id, &rbuf[16], ATA_ID_PROD, 16);
 	ata_id_string(args->id, &rbuf[32], ATA_ID_FW_REV, 4);
@@ -1839,6 +1913,7 @@
 	ata_id_string(args->id, (unsigned char *) rbuf + num,
 		      ATA_ID_SERNO, ATA_ID_SERNO_LEN);
 	num += ATA_ID_SERNO_LEN;
+    unsigned int len = 0;
 
 	/* SAT defined lu model and serial numbers descriptor */
 	/* piv=0, assoc=lu, code_set=ACSII, designator=t10 vendor id */
@@ -1846,11 +1921,23 @@
 	rbuf[num + 1] = 1;
 	rbuf[num + 3] = sat_model_serial_desc_len;
 	num += 4;
-	memcpy(rbuf + num, "ATA     ", 8);
+	
+
+    /* write in the model first so we can parse it for manufacturer */
+	ata_id_string(args->id, (unsigned char *) rbuf + num + 8,
+		      ATA_ID_PROD, ATA_ID_PROD_LEN);
+
+    len = ata_scsi_split_model_and_vendor(rbuf + num + 8);
+    if (len > 0) {
+        /* clear, then copy the vendor */
+        memcpy(rbuf + num, "        ", 8);
+        memcpy(rbuf + num, rbuf + num + 8, len);
+    } else {
+        memcpy(rbuf + num, "ATA     ", 8);
+    }
+    
 	num += 8;
-	ata_id_string(args->id, (unsigned char *) rbuf + num, ATA_ID_PROD,
-		      ATA_ID_PROD_LEN);
-	num += ATA_ID_PROD_LEN;
+    num += ATA_ID_PROD_LEN;
 	ata_id_string(args->id, (unsigned char *) rbuf + num, ATA_ID_SERNO,
 		      ATA_ID_SERNO_LEN);
 	num += ATA_ID_SERNO_LEN;
@@ -2188,7 +2275,11 @@
 	}
 
 	qc->scsidone(qc->scsicmd);
-	ata_qc_free(qc);
+
+	if (qc->ap->ops->qc_free)
+        qc->ap->ops->qc_free(qc);
+    else
+        ata_qc_free(qc);
 }
 
 /* is it pointless to prefer PIO for "safety reasons"? */
@@ -2282,8 +2373,12 @@
 
 		qc->scsicmd->result = SAM_STAT_CHECK_CONDITION;
 		qc->scsidone(cmd);
-		ata_qc_free(qc);
-		return;
+        if (qc->ap->ops->qc_free)
+            qc->ap->ops->qc_free(qc);
+        else
+            ata_qc_free(qc);
+ 
+        return;
 	}
 
 	/* successful completion or old EH failure path */
@@ -2327,7 +2422,11 @@
 	}
 
 	qc->scsidone(cmd);
-	ata_qc_free(qc);
+
+	if (qc->ap->ops->qc_free)
+        qc->ap->ops->qc_free(qc);
+    else
+        ata_qc_free(qc);
 }
 /**
  *	atapi_xlat - Initialize PACKET taskfile
@@ -2590,6 +2689,14 @@
 	if (tf->protocol == ATA_PROT_DMA && dev->dma_mode == 0)
 		goto invalid_fld;
 
+
+    /** @NOTE: OX800/OX810 driver needs polling for PIO and no data commands */
+    if ((tf->protocol == ATA_PROT_PIO) ||
+        (tf->protocol == ATA_PROT_NODATA)) {
+        tf->flags |= ATA_TFLAG_POLLING;
+    }
+
+
 	/*
 	 * 12 and 16 byte CDBs use different offsets to
 	 * provide the various register values.
