--- linux-2.6.36/drivers/char/ralink_gpio.c	2014-01-27 09:55:16.562197810 +0800
+++ linux-2.6.36/drivers/char/ralink_gpio.c	2014-01-29 09:01:41.767131659 +0800
@@ -57,6 +57,11 @@
     #define RALINK_GPIO_BUTTON_SD_CARD RALINK_GPIO_21
     #define RALINK_GPIO_BUTTON_WPS RALINK_GPIO_14
     #define RALINK_GPIO_BUTTON_RESET RALINK_GPIO_10
+    #define RALINK_GPIO_SD_CARD_NUM  43
+    #define RALINK_GPIO_WPS_NUM      -1
+    #define RALINK_GPIO_RESET_NUM    44
+    #define RALINK_GPIO_MCU_NUM      42
+    #define RALINK_GPIO_POWER_NUM    41
 #endif
 
 /* EZP: set button GPIO definitions */
@@ -304,6 +309,94 @@
 }
 EXPORT_SYMBOL(ralink_gpio_led_set);
 
+/* For MT7620
+ * GPIO 0-23 : 
+ *  ioctl : RALINK_GPIO_XXX : XXX can be function like read/write ...
+ *  reg : RALINK_REG_PIOXXX : XXX can be DIR/DATA/SET/RESET/PIORENA
+ *        and RALINK_INTCTL_PIO
+ *
+ * GPIO 24-39 :
+ *  ioctl : RALINK_GPIO3924_XXX : XXX can be function like read/write ...
+ *  reg : RALINK_REG_PIO3924XXX : XXX can be DIR/DATA/SET/RESET/PIORENA ...
+ * GPIO 40-71 :
+ *  ioctl : RALINK_GPIO7140_XXX : XXX can be function like read/write ...
+ *  reg : RALINK_REG_PIO7140XXX : XXX can be DIR/DATA/SET/RESET/PIORENA ...
+ * GPIO 72 :
+ *  ioctl : RALINK_GPIO72_XXX : XXX can be function like read/write ...
+ *  reg : RALINK_REG_PIO72XXX : XXX can be DIR/DATA/SET/RESET/PIORENA ...
+ * */
+/* wrapper function : separate to 0-23 24-39 40-71 72 with register and
+ * gpiomask
+ * */
+
+int ezp_gpio_wrapper(unsigned long gpiono, u32 *gpioreg_base, u32 **wrapper_reg, unsigned long *wrapper_gpiono, unsigned long *gpiomask) {
+    if((0 <= gpiono) && (gpiono < 24)) {
+        *wrapper_reg = gpioreg_base;
+        *wrapper_gpiono = gpiono;
+        *gpiomask = 0x00FFFFFF;
+    } else if((24 <= gpiono) && (gpiono < 40)) {
+        switch((unsigned long)gpioreg_base) {
+            case RALINK_REG_PIODIR:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO3924DIR);
+                break;
+            case RALINK_REG_PIOSET:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO3924SET);
+                break;
+            case RALINK_REG_PIORESET:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO3924RESET);
+                break;
+            case RALINK_REG_PIODATA:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO3924DATA);
+                break;
+            default:
+                printk("Unknown register %p\n", gpioreg_base);
+                break;
+        }
+        *wrapper_gpiono = gpiono - 24;
+        *gpiomask = 0x0000FFFF;
+    } else if((40 <= gpiono) && (gpiono < 72)) {
+        switch((unsigned long)gpioreg_base) {
+            case RALINK_REG_PIODIR:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO7140DIR);
+                break;
+            case RALINK_REG_PIOSET:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO7140SET);
+                break;
+            case RALINK_REG_PIORESET:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO7140RESET);
+                break;
+            case RALINK_REG_PIODATA:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO7140DATA);
+                break;
+            default:
+                printk("Unknown register %p\n", gpioreg_base);
+                break;
+        }
+        *wrapper_gpiono = gpiono - 40;
+        *gpiomask = 0xFFFFFFFF;
+    } else if(72 == gpiono) {
+        switch((unsigned long)gpioreg_base) {
+            case RALINK_REG_PIODIR:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO72DIR);
+                break;
+            case RALINK_REG_PIOSET:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO72SET);
+                break;
+            case RALINK_REG_PIORESET:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO72RESET);
+                break;
+            case RALINK_REG_PIODATA:
+                *wrapper_reg = (u32*)(RALINK_REG_PIO72DATA);
+                break;
+            default:
+                printk("Unknown register %p\n", gpioreg_base);
+                break;
+        }
+        *wrapper_gpiono = 0;
+        *gpiomask = 0x00000001;
+    }
+    return 0;
+}
 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35)
 long ralink_gpio_ioctl(struct file *file, unsigned int req,
 		unsigned long arg)
@@ -312,78 +405,63 @@
 		unsigned long arg)
 #endif
 {
-	unsigned long idx,tmp;
-	ralink_gpio_reg_info info;
+	unsigned long idx, tmp, tmp2;
+	unsigned long converted_gpiono, converted_gpiomask;
+    u32 *converted_gpioreg;
+    ralink_gpio_reg_info info;
 #ifdef CONFIG_RALINK_GPIO_LED
-	ralink_gpio_led_info led;
+    ralink_gpio_led_info led;
 #endif
 
     idx = (req >> RALINK_GPIO_DATA_LEN) & 0xFFL;
-	req &= RALINK_GPIO_DATA_MASK;
+    req &= RALINK_GPIO_DATA_MASK;
 
 	switch(req) {
+    case EZP_GPIO_START:
         ezp_gpio_start=1;
         break;
-#if defined (CONFIG_BOARD_AME) || defined (CONFIG_BOARD_AXA) || defined(CONFIG_BOARD_AXB) || defined(CONFIG_BOARD_AXM) || defined(CONFIG_BOARD_LIS) || defined (CONFIG_BOARD_GMA) || defined (PLATFORM_M2E)
+#if defined (CONFIG_BOARD_AME) || defined (CONFIG_BOARD_AXA) || defined(CONFIG_BOARD_AXB) || defined(CONFIG_BOARD_AXM) || defined(CONFIG_BOARD_LIS) || defined (CONFIG_BOARD_GMA) || defined (CONFIG_BOARD_M2E)
     case EZP_GPIO_SET_DIR:
         tmp = cpu_to_le32(arg);
         *(volatile u32 *)(RALINK_REG_PIODIR) = tmp & 0x3FFFFF;
-#if EZP_LED_DEBUG
+#ifdef EZP_LED_DEBUG
         printk("SET_DIR_00_22 - REG %x write val %x\n",(RALINK_REG_PIODIR), tmp);
 #endif
         tmp = (tmp >> 22);
         *(volatile u32 *)(RALINK_REG_PIODIR + 0x50) = tmp;
-#if EZP_LED_DEBUG
+#ifdef EZP_LED_DEBUG
         printk("SET_DIR_22_27 - REG %x write val %x\n",(RALINK_REG_PIODIR + 0x50), tmp);
 #endif
         break;
     case EZP_GPIO_SET_DIR_IN:
-        if (arg >= 0x400000) {
-            tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODIR + 0x50));
-            tmp &= ~(cpu_to_le32(arg) >> 22);
-            *(volatile u32 *)(RALINK_REG_PIODIR + 0x50) = tmp;
-#if EZP_LED_DEBUG
-            printk("SET_DIR_IN_22_27 - REG %x write val %x\n",(RALINK_REG_PIODIR + 0x50), tmp);
-#endif
-        } else {
-            tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODIR));
-            tmp &= ~cpu_to_le32(arg);
-            *(volatile u32 *)(RALINK_REG_PIODIR) = tmp;
-#if EZP_LED_DEBUG
-            printk("SET_DIR_IN_00_22 - REG %x write val %x\n",(RALINK_REG_PIODIR), tmp);
-#endif
-        }
+        /* arg can be 0-71, means accessing of gpio0 to gpio71 */
+        /* we first convert the gpio number to related reg address */
+        ezp_gpio_wrapper(arg, (u32*)RALINK_REG_PIODIR, &converted_gpioreg, &converted_gpiono, &converted_gpiomask);
+        tmp = le32_to_cpu(*(volatile u32 *)converted_gpioreg);
+        tmp &= ~(1 << converted_gpiono);
+        *(volatile u32 *)converted_gpioreg = tmp;
         break;
     case EZP_GPIO_SET_DIR_OUT:
-        if (arg >= 0x400000) {
-            tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODIR + 0x50));
-            tmp |= (cpu_to_le32(arg) >> 22);
-            *(volatile u32 *)(RALINK_REG_PIODIR + 0x50) = tmp;
-#if EZP_LED_DEBUG
-            printk("SET_DIR_OUT_22_27 - REG %x write val %x\n",(RALINK_REG_PIODIR + 0x50), tmp);
-#endif
-        } else {
-            tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODIR));
-            tmp |= cpu_to_le32(arg);
-            *(volatile u32 *)(RALINK_REG_PIODIR) = tmp;
-#if EZP_LED_DEBUG
-            printk("SET_DIR_OUT_00_22 - REG %x write val %x\n",(RALINK_REG_PIODIR), tmp);
-#endif
-        }
+        /* arg can be 0-71, means accessing of gpio0 to gpio71 */
+        /* we first convert the gpio number to related reg address */
+        ezp_gpio_wrapper(arg, (u32*)RALINK_REG_PIODIR, &converted_gpioreg, &converted_gpiono, &converted_gpiomask);
+        tmp = le32_to_cpu(*(volatile u32 *)converted_gpioreg);
+        tmp |= (1 << converted_gpiono);
+        *(volatile u32 *)converted_gpioreg = tmp;
         break;
     case EZP_GPIO_READ: //EZP_GPIO_READ_INT
         tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODATA));
         tmp = tmp & 0x3FFFFF;
-#if EZP_LED_DEBUG
+#ifdef EZP_LED_DEBUG
         printk("READ_00_22 - REG %x read val %x\n",(RALINK_REG_PIODATA), tmp);
 #endif
         tmp2 = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODATA + 0x50));
-#if EZP_LED_DEBUG
+#ifdef EZP_LED_DEBUG
         printk("READ_22_27 - REG %x read val %x\n",(RALINK_REG_PIODATA + 0x50), tmp2);
 #endif
         tmp = (tmp2 << 22) | tmp;
         put_user(tmp, (int __user *)arg);
-#if EZP_LED_DEBUG
+#ifdef EZP_LED_DEBUG
         printk("READ_00_27 - read val %x\n", tmp);
 #endif
         break;
@@ -391,63 +469,39 @@
         tmp = cpu_to_le32(arg);
         tmp2 = tmp & 0x3FFFFF;
         *(volatile u32 *)(RALINK_REG_PIODATA) = tmp2;
-#if EZP_LED_DEBUG
+#ifdef EZP_LED_DEBUG
         printk("WRITE_00_22 - REG %x write val %x\n",(RALINK_REG_PIODATA), tmp2);
 #endif
         tmp = (tmp >> 22);
         *(volatile u32 *)(RALINK_REG_PIODATA + 0x50) = tmp;
-#if EZP_LED_DEBUG
+#ifdef EZP_LED_DEBUG
         printk("WRITE_22_27 - REG %x write val %x\n",(RALINK_REG_PIODATA + 0x50), tmp);
 #endif
         break;
     case EZP_GPIO_SET: //EZP_GPIO_SET_INT
-        if (arg >= 0x400000) {
-            tmp = (cpu_to_le32(arg) >> 22);
-            *(volatile u32 *)(RALINK_REG_PIOSET + 0x50) = tmp;
-#if EZP_LED_DEBUG
-            printk("PIO_SET_22_27 - REG %x write val %x\n",(RALINK_REG_PIOSET + 0x50), tmp);
-#endif
-        } else {
-            *(volatile u32 *)(RALINK_REG_PIOSET) = cpu_to_le32(arg);
-#if EZP_LED_DEBUG
-            printk("PIO_SET_00_22 - REG %x write val %x\n",(RALINK_REG_PIOSET), tmp);
-#endif
-        }
+        /* arg can be 0-71, means accessing of gpio0 to gpio71 */
+        /* we first convert the gpio number to related reg address */
+        ezp_gpio_wrapper(arg, (u32*)RALINK_REG_PIOSET, &converted_gpioreg, &converted_gpiono, &converted_gpiomask);
+        tmp = (1 << converted_gpiono);
+        *(volatile u32 *)converted_gpioreg = tmp;
         break;
     case EZP_GPIO_CLEAR: //EZP_GPIO_CLEAR_INT
-        if (arg >= 0x400000) {
-            tmp = (cpu_to_le32(arg) >> 22);
-            *(volatile u32 *)(RALINK_REG_PIORESET + 0x50) = tmp;
-#if EZP_LED_DEBUG
-            printk("PIO_RESET_22_27 - REG %x write val %x\n",(RALINK_REG_PIORESET + 0x50), tmp);
-#endif
-        } else {
-            *(volatile u32 *)(RALINK_REG_PIORESET) = cpu_to_le32(arg);
-#if EZP_LED_DEBUG
-            printk("PIO_RESET_00_22 - REG %x write val %x\n",(RALINK_REG_PIORESET), tmp);
-#endif
-        }
+        /* arg can be 0-71, means accessing of gpio0 to gpio71 */
+        /* we first convert the gpio number to related reg address */
+        ezp_gpio_wrapper(arg, (u32*)RALINK_REG_PIORESET, &converted_gpioreg, &converted_gpiono, &converted_gpiomask);
+        tmp = (1 << converted_gpiono);
+        *(volatile u32 *)converted_gpioreg = tmp;
         break;
     case EZP_GPIO_READ_BIT:
-        if (0L <= idx && idx < RALINK_GPIO_DATA_LEN) {
-            if (idx < 22) {
-            tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODATA));
-            tmp = (tmp >> idx) & 1L;
-            put_user(tmp, (int __user *)arg);
-#if EZP_LED_DEBUG
-            printk("READ_BIT_00_22 - read pin %d val %x\n", idx, tmp);
-#endif
-            }else {
-            tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODATA + 0x50));
-            tmp = (tmp >> (idx - 22)) & 1L;
-            put_user(tmp, (int __user *)arg);
-#if EZP_LED_DEBUG
-            printk("READ_BIT_22_27 - read pin %x val %x\n", idx, tmp);
-#endif
-            }
+        /* arg can be 0-71, means accessing of gpio0 to gpio71 */
+        /* we first convert the gpio number to related reg address */
+        ezp_gpio_wrapper(idx, (u32*)RALINK_REG_PIODATA, &converted_gpioreg, &converted_gpiono, &converted_gpiomask);
+        tmp = le32_to_cpu(*(volatile u32 *)converted_gpioreg);
+        if((1 << converted_gpiono) & tmp) {
+            put_user(1, (int __user *)arg);
+        } else {
+            put_user(0, (int __user *)arg);
         }
-        else
-            return -EINVAL;
         break;
 #else
     case EZP_GPIO_SET_DIR:
@@ -585,6 +639,169 @@
                     info.irq);
         break;
 
+	case RALINK_GPIO_SET_DIR:
+		*(volatile u32 *)(RALINK_REG_PIODIR) = cpu_to_le32(arg);
+		break;
+	case RALINK_GPIO_SET_DIR_IN:
+		tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODIR));
+		tmp &= ~cpu_to_le32(arg);
+		*(volatile u32 *)(RALINK_REG_PIODIR) = tmp;
+		break;
+	case RALINK_GPIO_SET_DIR_OUT:
+		tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODIR));
+		tmp |= cpu_to_le32(arg);
+		*(volatile u32 *)(RALINK_REG_PIODIR) = tmp;
+		break;
+	case RALINK_GPIO_READ: //RALINK_GPIO_READ_INT
+		tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODATA));
+		put_user(tmp, (int __user *)arg);
+		break;
+	case RALINK_GPIO_WRITE: //RALINK_GPIO_WRITE_INT
+		*(volatile u32 *)(RALINK_REG_PIODATA) = cpu_to_le32(arg);
+		break;
+	case RALINK_GPIO_SET: //RALINK_GPIO_SET_INT
+		*(volatile u32 *)(RALINK_REG_PIOSET) = cpu_to_le32(arg);
+		break;
+	case RALINK_GPIO_CLEAR: //RALINK_GPIO_CLEAR_INT
+		*(volatile u32 *)(RALINK_REG_PIORESET) = cpu_to_le32(arg);
+		break;
+	case RALINK_GPIO_ENABLE_INTP:
+		*(volatile u32 *)(RALINK_REG_INTENA) = cpu_to_le32(RALINK_INTCTL_PIO);
+		break;
+	case RALINK_GPIO_DISABLE_INTP:
+		*(volatile u32 *)(RALINK_REG_INTDIS) = cpu_to_le32(RALINK_INTCTL_PIO);
+		break;
+	case RALINK_GPIO_REG_IRQ:
+		copy_from_user(&info, (ralink_gpio_reg_info *)arg, sizeof(info));
+		if (0 <= info.irq && info.irq < RALINK_GPIO_NUMBER) {
+			ralink_gpio_info[info.irq].pid = info.pid;
+#if defined (RALINK_GPIO_HAS_2722)
+			if (info.irq <= 21) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIORENA));
+				tmp |= (0x1 << info.irq);
+				*(volatile u32 *)(RALINK_REG_PIORENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIOFENA));
+				tmp |= (0x1 << info.irq);
+				*(volatile u32 *)(RALINK_REG_PIOFENA) = cpu_to_le32(tmp);
+			}
+			else {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO2722RENA));
+				tmp |= (0x1 << (info.irq-22));
+				*(volatile u32 *)(RALINK_REG_PIO2722RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO2722FENA));
+				tmp |= (0x1 << (info.irq-22));
+				*(volatile u32 *)(RALINK_REG_PIO2722FENA) = cpu_to_le32(tmp);
+			}
+#elif defined (RALINK_GPIO_HAS_9532)
+			if (info.irq <= 31) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIORENA));
+				tmp |= (0x1 << info.irq);
+				*(volatile u32 *)(RALINK_REG_PIORENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIOFENA));
+				tmp |= (0x1 << info.irq);
+				*(volatile u32 *)(RALINK_REG_PIOFENA) = cpu_to_le32(tmp);
+			} else if (info.irq <= 63) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO6332RENA));
+				tmp |= (0x1 << (info.irq-32));
+				*(volatile u32 *)(RALINK_REG_PIO6332RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO6332FENA));
+				tmp |= (0x1 << (info.irq-32));
+				*(volatile u32 *)(RALINK_REG_PIO6332FENA) = cpu_to_le32(tmp);
+			} else {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO9564RENA));
+				tmp |= (0x1 << (info.irq-64));
+				*(volatile u32 *)(RALINK_REG_PIO9564RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO9564FENA));
+				tmp |= (0x1 << (info.irq-64));
+				*(volatile u32 *)(RALINK_REG_PIO9564FENA) = cpu_to_le32(tmp);
+			}
+#else
+			if (info.irq <= 23) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIORENA));
+				tmp |= (0x1 << info.irq);
+				*(volatile u32 *)(RALINK_REG_PIORENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIOFENA));
+				tmp |= (0x1 << info.irq);
+				*(volatile u32 *)(RALINK_REG_PIOFENA) = cpu_to_le32(tmp);
+			}
+#if defined (RALINK_GPIO_HAS_4524)
+			else if (info.irq <= 39) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO3924RENA));
+				tmp |= (0x1 << (info.irq-24));
+				*(volatile u32 *)(RALINK_REG_PIO3924RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO3924FENA));
+				tmp |= (0x1 << (info.irq-24));
+				*(volatile u32 *)(RALINK_REG_PIO3924FENA) = cpu_to_le32(tmp);
+			}
+			else {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO4540RENA));
+				tmp |= (0x1 << (info.irq-40));
+				*(volatile u32 *)(RALINK_REG_PIO4540RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO4540FENA));
+				tmp |= (0x1 << (info.irq-40));
+				*(volatile u32 *)(RALINK_REG_PIO4540FENA) = cpu_to_le32(tmp);
+			}
+#elif defined (RALINK_GPIO_HAS_5124)
+			else if (info.irq <= 39) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO3924RENA));
+				tmp |= (0x1 << (info.irq-24));
+				*(volatile u32 *)(RALINK_REG_PIO3924RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO3924FENA));
+				tmp |= (0x1 << (info.irq-24));
+				*(volatile u32 *)(RALINK_REG_PIO3924FENA) = cpu_to_le32(tmp);
+			}
+			else {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO5140RENA));
+				tmp |= (0x1 << (info.irq-40));
+				*(volatile u32 *)(RALINK_REG_PIO5140RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO5140FENA));
+				tmp |= (0x1 << (info.irq-40));
+				*(volatile u32 *)(RALINK_REG_PIO5140FENA) = cpu_to_le32(tmp);
+			}
+#elif defined (RALINK_GPIO_HAS_9524) || defined (RALINK_GPIO_HAS_7224)
+			else if (info.irq <= 39) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO3924RENA));
+				tmp |= (0x1 << (info.irq-24));
+				*(volatile u32 *)(RALINK_REG_PIO3924RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO3924FENA));
+				tmp |= (0x1 << (info.irq-24));
+				*(volatile u32 *)(RALINK_REG_PIO3924FENA) = cpu_to_le32(tmp);
+			}
+			else if (info.irq <= 71) {
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO7140RENA));
+				tmp |= (0x1 << (info.irq-40));
+				*(volatile u32 *)(RALINK_REG_PIO7140RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO7140FENA));
+				tmp |= (0x1 << (info.irq-40));
+				*(volatile u32 *)(RALINK_REG_PIO7140FENA) = cpu_to_le32(tmp);
+			}
+			else {
+#if defined (RALINK_GPIO_HAS_7224)
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO72RENA));
+				tmp |= (0x1 << (info.irq-72));
+				*(volatile u32 *)(RALINK_REG_PIO72RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO72FENA));
+				tmp |= (0x1 << (info.irq-72));
+				*(volatile u32 *)(RALINK_REG_PIO72FENA) = cpu_to_le32(tmp);
+#else
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO9572RENA));
+				tmp |= (0x1 << (info.irq-72));
+				*(volatile u32 *)(RALINK_REG_PIO9572RENA) = cpu_to_le32(tmp);
+				tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIO9572FENA));
+				tmp |= (0x1 << (info.irq-72));
+				*(volatile u32 *)(RALINK_REG_PIO9572FENA) = cpu_to_le32(tmp);
+#endif
+			}
+#endif
+#endif
+		}
+		else
+			printk(KERN_ERR NAME ": irq number(%d) out of range\n",
+					info.irq);
+		break;
+
+
+
 #if defined (RALINK_GPIO_HAS_2722)
 	case RALINK_GPIO2722_SET_DIR:
 		*(volatile u32 *)(RALINK_REG_PIO2722DIR) = cpu_to_le32(arg);
@@ -937,7 +1154,7 @@
     { "HOME=/", "PATH=/sbin:/usr/sbin:/bin:/usr/bin", NULL };
     struct work_button *button_data =
         container_of(work, struct work_button, button_helper);
-    char function_id[6];
+    // char function_id[6];
 
     gpio_argv[0] = "/sbin/ezp-gpio";
     if (button_data->button_helper_data == BUTTON_SD_CARD) {
@@ -2190,62 +2407,74 @@
 #endif
 
     /* EZP: read gpio status */
-    tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODATA));
-    if (tmp & RALINK_GPIO_BUTTON_SD_CARD) {
-        if (!sd_card) {
-            sd_count=0;
-            sd_done=0;
+    // int ezp_gpio_wrapper(unsigned long gpiono, u32 *gpioreg_base, u32 **wrapper_reg, unsigned long *wrapper_gpiono, unsigned long *gpiomask)
+    // tmp = le32_to_cpu(*(volatile u32 *)(RALINK_REG_PIODATA));
+    u32 *gpio_reg;
+    unsigned long gpio_num, gpio_mask;
+    if(RALINK_GPIO_SD_CARD_NUM != -1) {
+        ezp_gpio_wrapper(RALINK_GPIO_SD_CARD_NUM, (u32*)(RALINK_REG_PIODATA), &gpio_reg, &gpio_num, &gpio_mask);
+        tmp = le32_to_cpu(*(volatile u32 *)(gpio_reg));
+        if (tmp & (1 << gpio_num)) {
+            if (!sd_card) {
+                sd_count=0;
+                sd_done=0;
+            }
+            sd_card=1;
+        } else {
+            if (sd_card) {
+                sd_count=0;
+                sd_done=0;
+            }
+            sd_card=0;
         }
-        sd_card=1;
-    } else {
-        if (sd_card) {
+        if (!sd_done) sd_count++;
+        if (sd_count > 10) {
+            sd_done=1;
             sd_count=0;
-            sd_done=0;
+            button_data.button_helper_data = BUTTON_SD_CARD;
+            schedule_work(&button_data.button_helper);
         }
-        sd_card=0;
     }
-    if (!sd_done) sd_count++;
-    if (sd_count > 10) {
-        sd_done=1;
-        sd_count=0;
-        button_data.button_helper_data = BUTTON_SD_CARD;
-        schedule_work(&button_data.button_helper);
-    }
-
-    if ((tmp & RALINK_GPIO_BUTTON_WPS) == 0)
-    {
-	    wps_count++;
-    }
-    else
-    {
-	    wps_push = 0;
-	    wps_count = 0;
-	    combo_push = 0;
-    }
-    if((wps_count >= 10) && (reset_count == 0) && !wps_push) {
-	    /* Do WPS button things */
-	    button_data.button_helper_data = BUTTON_WPS;
-	    schedule_work(&button_data.button_helper);
-	    wps_count = 0;
-	    wps_push = 1;
-    }
-
-    if ((tmp & RALINK_GPIO_BUTTON_RESET) == 0)
-    {
-        reset_count++;
-    }
-    else
-    {
-        reset_count = 0;
-        reset_push = 0;
-        combo_push = 0;
+    if(RALINK_GPIO_WPS_NUM != -1) {
+        ezp_gpio_wrapper(RALINK_GPIO_WPS_NUM, (u32*)(RALINK_REG_PIODATA), &gpio_reg, &gpio_num, &gpio_mask);
+        tmp = le32_to_cpu(*(volatile u32 *)(gpio_reg));
+        if ((tmp & (1 << gpio_num)) == 0)
+        {
+            wps_count++;
+        }
+        else
+        {
+            wps_push = 0;
+            wps_count = 0;
+            combo_push = 0;
+        }
+        if((wps_count >= 10) && (reset_count == 0) && !wps_push) {
+            /* Do WPS button things */
+            button_data.button_helper_data = BUTTON_WPS;
+            schedule_work(&button_data.button_helper);
+            wps_count = 0;
+            wps_push = 1;
+        }
     }
-    if((reset_count >= 100)) {
-	    button_data.button_helper_data = BUTTON_RESET;
-	    schedule_work(&button_data.button_helper);
-	    reset_count = 0;
+    if(RALINK_GPIO_RESET_NUM != -1) {
+        ezp_gpio_wrapper(RALINK_GPIO_RESET_NUM, (u32*)(RALINK_REG_PIODATA), &gpio_reg, &gpio_num, &gpio_mask);
+        tmp = le32_to_cpu(*(volatile u32 *)(gpio_reg));
+        if ((tmp & (1 << gpio_num)) == 0)
+        {
+            reset_count++;
+        }
+        else
+        {
+            reset_count = 0;
+            reset_push = 0;
+            combo_push = 0;
+        }
+        if((reset_count >= 100)) {
+            button_data.button_helper_data = BUTTON_RESET;
+            schedule_work(&button_data.button_helper);
+            reset_count = 0;
+        }
     }
-
 #ifdef RALINK_GPIO_BUTTON_FUNC
     ezp_gpio_handle_func_button(tmp,RALINK_GPIO_BUTTON_FUNC_MASK);
 #endif /* RALINK_GPIO_BUTTON_FUNC */
@@ -2349,6 +2578,9 @@
 #endif
 #if defined (CONFIG_RALINK_MT7620)
 	gpiomode &= ~0x2000;  //clear bit[13] WLAN_LED
+#if defined (CONFIG_BOARD_M2E)
+    gpiomode |= 0x00008000;
+#endif
 #endif
 	gpiomode |= RALINK_GPIOMODE_DFT;
 	*(volatile u32 *)(RALINK_REG_GPIOMODE) = cpu_to_le32(gpiomode);
--- linux-2.6.36/include/linux/ezp-gpio.h	2014-01-27 09:45:26.430182008 +0800
+++ linux-2.6.36/include/linux/ezp-gpio.h	2014-01-28 16:53:42.695052675 +0800
@@ -1,21 +1,21 @@
-#define EZP_GPIO_START     0xFF  //  Start GPIO
-#define EZP_GPIO_SET_DIR     0x01  // set input/output direction
-#define EZP_GPIO_SET_DIR_IN      0x11 // only set one pin direction input
-#define EZP_GPIO_SET_DIR_OUT     0x12 // only set one pin direction output
-#define EZP_GPIO_READ        0x02     // read register data
-#define EZP_GPIO_WRITE       0x03     // write data to register
-#define EZP_GPIO_SET         0x21     // set register one bit to 1
-#define EZP_GPIO_CLEAR       0x31     // set register one bit to 0
-#define EZP_GPIO_READ_BIT        0x04 // read register one bit
-#define EZP_GPIO_WRITE_BIT       0x05 // write register one bit
-#define EZP_GPIO_READ_BYTE       0x06 // read a byte data from register
-#define EZP_GPIO_WRITE_BYTE      0x07 // write a byte data to register
-#define EZP_GPIO_READ_INT        0x02 //same as read
-#define EZP_GPIO_WRITE_INT       0x03 //same as write
-#define EZP_GPIO_SET_INT     0x21 //same as set
-#define EZP_GPIO_CLEAR_INT       0x31 //same as clear
-#define EZP_GPIO_ENABLE_INTP     0x08 // enable interrupt
-#define EZP_GPIO_DISABLE_INTP    0x09 // disable interrupt
-#define EZP_GPIO_REG_IRQ     0x0A     
+#define EZP_GPIO_START     0x10FF  //  Start GPIO
+#define EZP_GPIO_SET_DIR     0x1001  // set input/output direction
+#define EZP_GPIO_SET_DIR_IN      0x1011 // only set one pin direction input
+#define EZP_GPIO_SET_DIR_OUT     0x1012 // only set one pin direction output
+#define EZP_GPIO_READ        0x1002     // read register data
+#define EZP_GPIO_WRITE       0x1003     // write data to register
+#define EZP_GPIO_SET         0x1021     // set register one bit to 1
+#define EZP_GPIO_CLEAR       0x1031     // set register one bit to 0
+#define EZP_GPIO_READ_BIT        0x1004 // read register one bit
+#define EZP_GPIO_WRITE_BIT       0x1005 // write register one bit
+#define EZP_GPIO_READ_BYTE       0x1006 // read a byte data from register
+#define EZP_GPIO_WRITE_BYTE      0x1007 // write a byte data to register
+#define EZP_GPIO_READ_INT        0x1002 //same as read
+#define EZP_GPIO_WRITE_INT       0x1003 //same as write
+#define EZP_GPIO_SET_INT     0x1021 //same as set
+#define EZP_GPIO_CLEAR_INT       0x1031 //same as clear
+#define EZP_GPIO_ENABLE_INTP     0x1008 // enable interrupt
+#define EZP_GPIO_DISABLE_INTP    0x1009 // disable interrupt
+#define EZP_GPIO_REG_IRQ     0x100A     
 #define EZP_GPIO_LED_SET     0x41    // set one pin to led and led behavior
 
