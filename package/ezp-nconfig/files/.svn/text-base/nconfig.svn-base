#!/bin/sh   
# 
# We should add "tts/0::respawn:/nconfig".
# 
AWK_INC="/sbin/nconfig.awk"
TMP_AWK="/tmp/nconfig.awk"

TMP_RET=""
TMP_FILE="/tmp/nconfig.out"

TARGET_IP="192.168.1.1"
TARGET_PORT="8080"
TARGET_TIMEOUT="10"
TARGET_UID="admin"
TARGET_PW="admin"
COOKIE="auth=YWRtaW46YWRtaW4%3D"

COMMIT_FACTOR=1
HTTP_REQ_ARG="-m $TARGET_TIMEOUT -s -u $TARGET_UID:$TARGET_PW"

MACHINE_ID="00:41:F3:72:65:1B"

show_msg(){
    dialog --title "$PARA_BRAND $PARA_MODEL MAC Configuration" --msgbox "$1 \n" 6 40
}

mac_add(){
    inc=$2
    cat $AWK_INC >  $TMP_AWK
    echo "{" >> $TMP_AWK
    echo "printf(\"%s\\n\", tomac(todec(\$1)+$2));" >> $TMP_AWK
    echo "}" >> $TMP_AWK
    
#  M=`echo "$1"|tr -d ':'  |awk  --source '{printf("%s\n", tomac(todec($1)+'"$2"'));}' -f $AWK_INC`
    M=`echo "$1" | tr -d ':' | tr a-z A-Z | awk  -f $TMP_AWK`
    TMP_RET=$M
}


get_nvram() {
    MODEL=$(nvram get fac_model)

    PARA_PROD_SUPERCAT=$(nvram get fac_prod_supercat)
    PARA_PROD_CAT=$(nvram get fac_prod_cat)
    PARA_PROD_SUBCAT=$(nvram get fac_prod_subcat)

    START_MAC1=$(nvram get fac_start_mac1)
    START_MAC2=$(nvram get fac_start_mac2)
    END_MAC1=$(nvram get fac_end_mac1)
    END_MAC2=$(nvram get fac_end_mac2)
    INC_MAC1=$(nvram get fac_inc_mac1)
    INC_MAC2=$(nvram get fac_inc_mac2)

    [ "$PARA_PROD_CAT" = "L" -o "$PARA_PROD_CAT" = "N" ] && {
        START_MAC3=$(nvram get fac_start_mac3)
        END_MAC3=$(nvram get fac_end_mac3)
        INC_MAC3=$(nvram get fac_inc_mac3)
    }

    TOTAL_COUNT=$(nvram get fac_total_count)
    CUR_COUNT=$(nvram get fac_cur_count)

    PARA_BRAND=$(nvram get fac_brand)
    [ "$PARA_BRAND" = "PROX" -a "$PARA_PROD_CAT" = "I" ] && {
        MAC_POOL=$(nvram get fac_mac_pool)
        LAST_MAC=""
    }
    PARA_MODEL=$(nvram get fac_model)
    PARA_HTTP_PORT_DEFAULT=$(nvram get fac_http_port)
    PARA_LANG_DEFAULT=$(nvram get fac_lang)
    PARA_LAN_IPADDR=$(nvram get fac_lan_ipaddr)
    PARA_USER_ID=$(nvram get fac_user_id)
    PARA_PASSWD=$(nvram get fac_passwd)
    PARA_SSID=$(nvram get fac_ssid)
    PARA_REGION=$(nvram get fac_region)
    PARA_VERSION=$(nvram get fac_version)
    PARA_FILE=$(nvram get fac_file)
}

set_nvram() {
    need_commit=`expr $CUR_COUNT \% $COMMIT_FACTOR`
    
    nvram fset fac_cur_count=${CUR_COUNT}
    [ "$PARA_BRAND" = "PROX" -a "$PARA_PROD_CAT" = "I" ] && {
        nvram fset fac_mac_pool=${MAC_POOL}
    }
    if [ $need_commit = "0" ]; then
	nvram commit
	
    fi
}

get_machine_info() {
    HT_CODE=`curl $HTTP_REQ_ARG -w "%{http_code}" -b $COOKIE http://$TARGET_IP:$TARGET_PORT/factory.asp -o $TMP_FILE`
    if [ "$?" != "0" ]; then
        show_msg "Cannot connect to target at http://$TARGET_IP:$TARGET_PORT/"
        return 1
    fi

    [ "$PARA_PROD_CAT" = "B" -o "$PARA_PROD_CAT" = "L" ] && {
        MID=`awk '/ezp-wl0.*value*/ {print $4}' $TMP_FILE |awk -F'"' '{print $2}'`
        if [ -z "$MID" ]; then
            show_msg "Device error!"
            return 1
        fi
    }
	
    [ "$PARA_PROD_CAT" = "C" -o "$PARA_PROD_CAT" = "T" -o "$PARA_PROD_CAT" = "M"  -o "$PARA_PROD_CAT" = "P" -o "$PARA_PROD_CAT" = "K" -o "$PARA_PROD_CAT" = "U" -o "$PARA_PROD_CAT" = "O" ] && {

        MID=$MACHINE_ID
        WAN0_MAC=`awk '/ezp-wan0.*value*/ {print $4}' $TMP_FILE |awk -F'"' '{print $2}'`
        mac_add $WAN0_MAC -1
        LAN0_MAC=$TMP_RET 
        [ -z "$WAN0_MAC" -o -z "$LAN0_MAC" ] && {
            show_msg "Device error!"
            return 1
        }
    }
    [ "$PARA_BRAND" = "PROX" -a "$PARA_PROD_CAT" = "I" ] && {
        MID=$MACHINE_ID
        WLAN_MAC="$MAC_POOL"
        mac_add $MAC_POOL 5
        WAN0_MAC=$TMP_RET 
        mac_add $MAC_POOL 4
        LAN0_MAC=$TMP_RET 
    }    

    [ "$PARA_PROD_CAT" = "N" ] && {
        MID=$MACHINE_ID
        WAN0_MAC=`awk '/ezp-wan0.*value*/ {print $4}' $TMP_FILE |awk -F'"' '{print $2}'`
#        WAN1_MAC=`awk '/ezp-wan1.*value*/ {print $4}' $TMP_FILE |awk -F'"' '{print $2}'`
        mac_add $WAN0_MAC -1
        LAN0_MAC=$TMP_RET 
        mac_add $WAN0_MAC 1
        WAN1_MAC=$TMP_RET 
        [  -z "$WAN0_MAC" -o -z "$WAN1_MAC" -o  -z "$LAN0_MAC" ] && {
            show_msg "Device error!"
            return 1
        }
    }

    return 0
}

set_mac() {
    [ "$PARA_PROD_CAT" = "B" ] && {
        L_Key=`echo -n "$NOW_MAC1$NOW_MAC2$MID$PARA_BRAND$PARA_MODEL"|md5sum|awk '{printf("%s",toupper($1));}'`
        WAN_STR_ALL="-d wan_num=1 -d wan1_hwaddr_default=$NOW_MAC1"
        LAN_STR_ALL="-d lan_num=1 -d lan1_hwaddr_default=$NOW_MAC2"
    }

    [ "$PARA_PROD_CAT" = "L" ] && {
        L_Key=`echo -n "$NOW_MAC1$NOW_MAC3$MID$PARA_BRAND$PARA_MODEL"|md5sum|awk '{printf("%s",toupper($1));}'`
        WAN_STR_ALL="-d wan_num=2 -d wan1_hwaddr_default=$NOW_MAC1 \
                     -d wan2_hwaddr_default=$NOW_MAC2"
        LAN_STR_ALL="-d lan_num=1 -d lan1_hwaddr_default=$NOW_MAC3"
    }

    [ "$PARA_PROD_CAT" = "C" -o  "$PARA_PROD_CAT" = "T" -o "$PARA_PROD_CAT" = "M"  -o "$PARA_PROD_CAT" = "P" -o "$PARA_PROD_CAT" = "K" -o "$PARA_PROD_CAT" = "U" -o "$PARA_PROD_CAT" = "O" ] && {
        MID_STR="-d machine_id=$MID"
        L_Key=`echo -n "$WAN0_MAC$LAN0_MAC$MID$PARA_BRAND$PARA_MODEL"|md5sum|awk '{printf("%s",toupper($1));}'`
        WAN_STR_ALL="-d wan_num=1 -d wan1_hwaddr_default=$WAN0_MAC" LAN_STR_ALL="-d lan_num=1 -d lan1_hwaddr_default=$LAN0_MAC"
    }

    [ "$PARA_BRAND" = "PROX" -a "$PARA_PROD_CAT" = "I" ] && {
        MID_STR="-d machine_id=$MID"
        L_Key=`echo -n "$WAN0_MAC$LAN0_MAC$MID$PARA_BRAND$PARA_MODEL"|md5sum|awk '{printf("%s",toupper($1));}'`
        WAN_STR_ALL="-d wan_num=1 -d wan1_hwaddr_default=$WAN0_MAC"
        LAN_STR_ALL="-d lan_num=1 -d lan1_hwaddr_default=$LAN0_MAC -d wlan_hwaddr_default=$WLAN_MAC"
    }

    [ "$PARA_PROD_CAT" = "N" ] && {
        MID_STR="-d machine_id=$MID"
        L_Key=`echo -n "$WAN0_MAC$LAN0_MAC$MID$PARA_BRAND$PARA_MODEL"|md5sum|awk '{printf("%s",toupper($1));}'`
        WAN_STR_ALL="-d wan_num=2 -d wan1_hwaddr_default=$WAN0_MAC \
                     -d wan2_hwaddr_default=$WAN1_MAC"
        LAN_STR_ALL="-d lan_num=1 -d lan1_hwaddr_default=$LAN0_MAC"
    }
    PARA_MODEL_URL="$(echo $PARA_MODEL|sed 's/ /%20/')"
    WL_ENABLE=$(nvram get fac_wl_enable)
    [ -z "$WL_ENABLE" ] && WL_ENABLE=1
    WL_STR_ALL="-d wl_enable_default=$WL_ENABLE"

    AUTH_CONF="-d factory= -d model=$PARA_MODEL_URL -d brand=$PARA_BRAND \
               -d http_port_default=$PARA_HTTP_PORT_DEFAULT \
               -d lang_default=$PARA_LANG_DEFAULT -d prod_cat=$PARA_PROD_CAT \
               -d prod_subcat=$PARA_PROD_SUBCAT \
               -d prod_supercat=$PARA_PROD_SUPERCAT \
               -d lan_ipaddr_default=$PARA_LAN_IPADDR \
               -d userid_default=$PARA_USER_ID -d passwd_default=$PARA_PASSWD \
               -d wl0_ssid_default=$PARA_SSID \
               -d wl0_region_default=$PARA_REGION" 

    HT_CODE=`curl $HTTP_REQ_ARG -w "%{http_code}" -b $COOKIE http://$TARGET_IP:$TARGET_PORT/apply.cgi -o $TMP_FILE \
                $WAN_STR_ALL $WL_STR_ALL $LAN_STR_ALL $MID_STR $AUTH_CONF \
                -d license_key=$L_Key -d machine_id=$MID -d action=Apply --trace-ascii /tmp/r1`
    if [ "$?" != "0" ]; then
        show_msg "Cannot connect to target at http://$TARGET_IP:$TARGET_PORT/"
        exit
    fi
    
    is_success=`grep return_value=0 $TMP_FILE|awk '{print $1}'`
    # We hit some weird situation that the return value of curl command is
    # 200000 when the command triggers reboot. Therefore, the check of the
    # executing of curl return=0 relies on the HTTP file from the server.
    
    if [  -z "$is_success"  ]; then
        show_msg "Write MAC failed at count $CUR_COUNT!"
        exit
    fi

    return 0
}

exec_default_reboot() {
    HT_CODE=`curl $HTTP_REQ_ARG -w "%{http_code}" http://$TARGET_IP:$TARGET_PORT/default.cgi -o $TMP_FILE --trace-ascii /tmp/r1`
    if [ "$?" != "0" ]; then
        show_msg "1. Cannot connect to target at http://$TARGET_IP:$TARGET_PORT/"
        exit
    fi

    return 0; 
}
display() {
local msg
[ -n "$prod_supercat" ] && {
        msg=$prod_supercat.$prod_subcat
} || {
        msg=$prod_cat.$prod_subcat
}

dialog --clear --timeout 1 --title "AXIMCom Firmware Upgrade" \
       --msgbox "\n Firmware version : $version \n \
File name : $file \n \
Product category : $msg \n \
Model Name : $model \n \
Current License: $current / $total_count \n\n \
Port1 Status: $status1 \n\n \
Port2 Status: $status2 \n\n \
Port3 Status: $status3 \n\n \
Port4 Status: $status4 \n\n \
Port5 Status: $status5 \n \
" 30 60 2>/dev/null
}
############# nconfig START ##############################################
TERM=vt100

[ "$(nvram get auth_mode)" = "1" ] && {

local old_status
local res=1
local model=$(nvram get fac_model) 
local prod_supercat=$(nvram get fac_prod_supercat)
local prod_cat=$(nvram get fac_prod_cat)
local prod_subcat=$(nvram get fac_prod_subcat)
local total_count=$(nvram get fac_total_count)
#local version=$(nvram get fac_version)
#local file=$(nvram get fac_file)
local version
local file

# mount usb storage
[ -d "/tmp/sda1" ] || mkdir -p /tmp/sda1
while [ "$res" != "0" ];do
mount -t vfat /dev/sda1 /tmp/sda1
res=$?
[ "$res" != "0" ] && {
dialog --clear --title "AXIMCom Firmware Upgrade" \
       --msgbox "\n Mount storage device fail!!\n \
" 30 60 2>/dev/null
}
done

# Read config file from USB storage
# to get fac_version and fac_file
# Check config file is existed
while [ ! -f "/tmp/sda1/fw_upg.cfg" ]; do
dialog --clear --title "AXIMCom Firmware Upgrade" \
       --msgbox "\n File fw_upg.cfg does not exist!!\n \
" 30 60 2>/dev/null
done

#get fac_version and fac_file

version="$(awk '/FW_VERSION/{FS="\""; print $2}' /tmp/sda1/fw_upg.cfg)"
file="$(awk '/FW_FILENAME/{FS="\""; print $2}' /tmp/sda1/fw_upg.cfg)"


# check file exist
while [ ! -f "/tmp/sda1/$file" ]; do
dialog --clear --title "AXIMCom Firmware Upgrade" \
       --msgbox "\n File $file does not exist!!\n \
" 30 60 2>/dev/null
done

# copy firmware to DRAM
cp -rf /tmp/sda1/$file /tmp/$file

iptables -F -t mangle
iptables -F -t filter
iptables -F -t nat

upgrade vlan1 port1 $version $file &
upgrade vlan2 port2 $version $file &
upgrade vlan3 port3 $version $file &
upgrade vlan4 port4 $version $file &
upgrade vlan5 port5 $version $file &

$(sleep 1)

while [ "1" ]; do
trap "display" 1 2 3 15
local current=$(nvram get fac_cur_count)
status1=$(cat /tmp/port1)
status2=$(cat /tmp/port2)
status3=$(cat /tmp/port3)
status4=$(cat /tmp/port4)
status5=$(cat /tmp/port5)
[ "$old_status" != "$status1$status2$status3$status4$status5" ] && {
display
old_status="$status1$status2$status3$status4$status5"
}
done
}
stty -isig -clocal -ignpar -ixany opost -hupcl iexten echok

get_nvram

[ -z "$PARA_PROD_CAT" ] && {
    show_msg "Product category is needed"
    return 1
}

[ -z "$PARA_PROD_SUBCAT" ] && {
    show_msg "Product subcategory is needed"
    return 1
}
if [ $TOTAL_COUNT = $CUR_COUNT ]; then
    show_msg "Already done for this batch, please get more license!"
    exit
fi

NOW_MAC1=$START_MAC1
NOW_MAC2=$START_MAC2
[ "$PARA_PROD_CAT" = "L" -o "$PARA_PROD_CAT" = "N" ] && {
    NOW_MAC3=$START_MAC3
}


[ "$PARA_PROD_CAT" = "B" -o "$PARA_PROD_CAT" = "L" ] && {
    RANGE=`expr $TOTAL_COUNT \* $INC_MAC1`
    mac_add $START_MAC1 $RANGE
    END_MAC1=$TMP_RET 
    RANGE=`expr $TOTAL_COUNT \* $INC_MAC2`
    mac_add $START_MAC2 $RANGE
    END_MAC2=$TMP_RET 
    
    RANGE=`expr $CUR_COUNT \* $INC_MAC1`
    mac_add $START_MAC1 $RANGE
    NOW_MAC1=$TMP_RET 
    RANGE=`expr $CUR_COUNT \* $INC_MAC2`
    mac_add $START_MAC2 $RANGE
    NOW_MAC2=$TMP_RET 
    [ "$PARA_PROD_CAT" = "L" ] && {
        RANGE=`expr $TOTAL_COUNT \* $INC_MAC3`
        mac_add $START_MAC3 $RANGE
        END_MAC3=$TMP_RET 
    
        RANGE=`expr $CUR_COUNT \* $INC_MAC3`
        mac_add $START_MAC3 $RANGE
        NOW_MAC3=$TMP_RET 
    }
}

DIALOG_PARA_START="Start MAC1:$START_MAC1 \nStart MAC2:$START_MAC2 \n"
[ "$PARA_PROD_CAT" = "L" ] && {
    DIALOG_PARA_START="${DIALOG_PARA_START}Start MAC3:$START_MAC3 \n"
}

DIALOG_PARA_END="End MAC1:$END_MAC1 \nEnd MAC2:$END_MAC2 \n"
[ "$PARA_PROD_CAT" = "L" ] && {
    DIALOG_PARA_END="${DIALOG_PARA_END}End MAC3:$END_MAC2 \n"
}

DIALOG_PARA_NOW="Current MAC1:$NOW_MAC1 \nCurrent MAC2:$NOW_MAC2 \n"
[ "$PARA_PROD_CAT" = "L" ] && {
    DIALOG_PARA_NOW="${DIALOG_PARA_NOW}Current MAC3:$NOW_MAC2 \n"
}

while [ 1 ]; do
    # avoid user to push ctrl-C 
    trap "" 1 2 3 15
    [ "$PARA_PROD_CAT" = "C" -o "$PARA_PROD_CAT" = "M" -o "$PARA_PROD_CAT" = "P" -o "$PARA_PROD_CAT" = "T" -o "$PARA_PROD_CAT" = "N" -o "$PARA_PROD_CAT" = "K" -o "$PARA_PROD_CAT" = "U" -o "$PARA_PROD_CAT" = "O" -o "$PARA_PROD_CAT" = "I"  ] && {
        [ "$PARA_BRAND" = "PROX" -a "$PARA_PROD_CAT" = "I" ] && {
        dialog --title "$PARA_BRAND $PARA_MODEL MAC Configuration" \
            --yesno \
"\nCurrent producing: ${CUR_COUNT} / ${TOTAL_COUNT} \n\n\
Last MAC:    ${LAST_MAC}\n\
Current MAC: ${MAC_POOL}\n\
Proceed with this one? \n\
or \n\
ESC to quit! \n\
" 15 50  2> $TMP/reply
        } || {
        dialog --title "$PARA_BRAND $PARA_MODEL MAC Configuration" \
            --yesno \
"\nCurrent producing: ${CUR_COUNT} / ${TOTAL_COUNT} \n\n\
Proceed with this one? \n\
or \n\
ESC to quit! \n\
        }

        NOW_RET="$?"
        if [ $NOW_RET = "255" ]; then
            rm -f $TMP/reply
            #  exit
            #/bin/ash
            clear
        elif [ $NOW_RET = "1" ]; then
            dialog --title "$PARA_BRAND $PARA_MODEL MAC Configuration" --msgbox "NO move forward!\n" 6 40
        else
            /sbin/arp -d $TARGET_IP -i br0

            get_machine_info

            if [ "$?" -eq "0" ]; then

                set_mac 
                exec_default_reboot

                if [ "$?" -eq "0" ]; then
                    REPLY=`cat $TMP/reply`
                    rm -f $TMP/reply

                    mac_add $MACHINE_ID "2"
                    MACHINE_ID=$TMP_RET

                    CUR_COUNT=`expr $CUR_COUNT + 1`
                    [ "$PARA_BRAND" = "PROX" -a "$PARA_PROD_CAT" = "I" ] && {
                        LAST_MAC=$MAC_POOL 
                        mac_add $MAC_POOL 8
                        MAC_POOL=$TMP_RET 
                    }
                    set_nvram
                fi
            fi
             
        fi
    }

    [ "$PARA_PROD_CAT" = "B" -o "$PARA_PROD_CAT" = "L" ] && {
        dialog --title "$PARA_BRAND $PARA_MODEL MAC Configuration" \
            --yesno \
"\n${DIALOG_PARA_START}\n\n${DIALOG_PARA_END}\n\n${DIALOG_PARA_NOW}\n\n\n\
Current producing: ${CUR_COUNT} / ${TOTAL_COUNT} \n\
\n\
Proceed with this one? \n\
or \n\
ESC to quit! \n\
" 22 50  2> $TMP/reply

        NOW_RET="$?"
        if [ $NOW_RET = "255" ]; then
            rm -f $TMP/reply
            #  exit
            #/bin/ash
            clear
        elif [ $NOW_RET = "1" ]; then
            dialog --title "$PARA_BRAND $PARA_MODEL MAC Configuration" --msgbox "NO move forward!\n" 6 40
        else
            /sbin/arp -d $TARGET_IP -i br0

            get_machine_info

            if [ "$?" -eq "0" ]; then

                set_mac 
                exec_default_reboot

                if [ "$?" -eq "0" ]; then
                    REPLY=`cat $TMP/reply`
                    rm -f $TMP/reply

                    mac_add $NOW_MAC1 $INC_MAC1
                    NOW_MAC1=$TMP_RET 
                    mac_add $NOW_MAC2 $INC_MAC2
                    NOW_MAC2=$TMP_RET
                    [ "$PARA_PROD_CAT" = "L" ] && {
                        mac_add $NOW_MAC3 $INC_MAC3
                        NOW_MAC3=$TMP_RET
                    }

                    CUR_COUNT=`expr $CUR_COUNT + 1`
                    set_nvram
                fi
            fi
             
        fi
    }

    if [ $CUR_COUNT -ge $TOTAL_COUNT ]; then
        show_msg "All done for $CUR_COUNT pcs!"
        exit
    fi
done

