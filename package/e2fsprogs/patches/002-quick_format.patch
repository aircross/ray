--- e2fsprogs-1.40.11.orig/misc/mke2fs.c	2008-06-18 09:53:14.000000000 +0800
+++ e2fsprogs-1.40.11.new/misc/mke2fs.c	2009-09-29 17:30:51.723133490 +0800
@@ -65,6 +65,9 @@
 extern int isatty(int);
 extern FILE *fpopen(const char *cmd, const char *mode);
 
+/* EZP add */
+int do_not_lazy_it=0;
+
 const char * program_name = "mke2fs";
 const char * device_name /* = NULL */;
 
@@ -100,6 +103,7 @@
 	"\t[-N number-of-inodes] [-m reserved-blocks-percentage] "
 	"[-o creator-os]\n\t[-g blocks-per-group] [-L volume-label] "
 	"[-M last-mounted-directory]\n\t[-O feature[,...]] "
+    "[-z ](don't lazy it.)\n\t"
 	"[-r fs-revision] [-E extended-option[,...]]\n"
 	"\t[-T fs-type] [-jnqvFSV] device [blocks-count]\n"),
 		program_name);
@@ -324,10 +328,14 @@
 
 static void progress_update(struct progress_struct *progress, __u32 val)
 {
+    char buf[64];
 	if ((progress->format[0] == 0) || progress->skip_progress)
 		return;
 	printf(progress->format, val, progress->max);
 	fputs(progress->backup, stdout);
+    snprintf(buf, sizeof(buf), "echo \"%d:%d\" > /tmp/format.info",
+            val, progress->max);
+    system(buf);
 }
 
 static void progress_close(struct progress_struct *progress)
@@ -414,6 +422,12 @@
 		progress_init(&progress, _("Writing inode tables: "),
 			      fs->group_desc_count);
 
+    /* EZP add: for speed up */
+           if(!do_not_lazy_it)
+               printf("T: try to quick-formatting!\n");
+       else
+               printf("T: formal-formatting.\n");
+
 	if (EXT2_HAS_COMPAT_FEATURE(fs->super, 
 				    EXT2_FEATURE_COMPAT_LAZY_BG))
 		lazy_flag = 1;
@@ -422,7 +436,12 @@
 		progress_update(&progress, i);
 		
 		blk = fs->group_desc[i].bg_inode_table;
-		num = fs->inode_blocks_per_group;
+        /* EZP modified: for speed up */
+        if(!do_not_lazy_it)
+            num = 1;
+        else
+            num = fs->inode_blocks_per_group;
+                
 
 		if (!(lazy_flag &&
 		      (fs->group_desc[i].bg_flags & EXT2_BG_INODE_UNINIT))) {
@@ -1029,7 +1048,7 @@
 	}
 
 	while ((c = getopt (argc, argv,
-		    "b:cf:g:i:jl:m:no:qr:s:tvE:FI:J:L:M:N:O:R:ST:V")) != EOF) {
+		    "b:cf:g:i:jl:m:no:qr:s:tvzE:FI:J:L:M:N:O:R:ST:V")) != EOF) {
 		switch (c) {
 		case 'b':
 			blocksize = strtol(optarg, &tmp, 0);
@@ -1183,6 +1202,9 @@
 			/* Print version number and exit */
 			show_version_only++;
 			break;
+        case 'z': /* EZP add: for speed up */
+            do_not_lazy_it = 1;
+            break;
 		default:
 			usage();
 		}
@@ -1782,6 +1804,7 @@
 			goto no_journal;
 		}
 		if (!quiet) {
+            system("echo \"creating_journal\" >> /tmp/format.info");
 			printf(_("Creating journal (%d blocks): "),
 			       journal_blocks);
 			fflush(stdout);
@@ -1793,14 +1816,19 @@
 				 _("\n\twhile trying to create journal"));
 			exit(1);
 		}
-		if (!quiet)
+		if (!quiet) {
 			printf(_("done\n"));
+            system("echo \"creating_journal_done\" >> /tmp/format.info");
+        }
+
 	}
 no_journal:
 
-	if (!quiet)
-		printf(_("Writing superblocks and "
-		       "filesystem accounting information: "));
+    if (!quiet) {
+        system("echo \"writing_info\" >> /tmp/format.info");
+        printf(_("Writing superblocks and "
+                    "filesystem accounting information: "));
+    }
 	retval = ext2fs_flush(fs);
 	if (retval) {
 		fprintf(stderr,
@@ -1810,6 +1838,7 @@
 		printf(_("done\n\n"));
 		if (!getenv("MKE2FS_SKIP_CHECK_MSG"))
 			print_check_message(fs);
+        system("echo \"writing_info_done\" >> /tmp/format.info");
 	}
 	val = ext2fs_close(fs);
 	remove_error_table(&et_ext2_error_table);
